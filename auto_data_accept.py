from telebot.types import Message
from common import ShowButtons, Stamp
from source import (AUTO_BTNS, CANCEL_BTN, WELCOME_BTNS,
                    AUTO_CHOICE, AUTO_SUBS_DICT, AUTO_REPS_DICT,
                    ACCOUNTS, LINK_FORMAT, MAX_MINS,
                    TIME_FORMAT, BOT, FILE_AUTO_VIEWS)
from re import match
from deletion import DeleteAutomaticRequest
from info_senders import PrintAutomaticRequest
from datetime import datetime
from file import SaveRequestsToFile


def AutomaticChannelDispatcher(message: Message, file: str) -> None:
    if message.text == AUTO_BTNS[0]:
        ShowButtons(message, CANCEL_BTN, '‚ùî –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞'
                                         ' –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞—è–≤–∫–∞ (https://t.me/name –∏–ª–∏ @name):')
        BOT.register_next_step_handler(message, AutomaticChannelAction, file)
    elif message.text == AUTO_BTNS[1]:
        BOT.send_message(message.from_user.id, '‚ùî –í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–∞–Ω–∞–ª–∞, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å '
                                               '–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∑–∞—è–≤–∫—É (name):')
        BOT.register_next_step_handler(message, DeleteAutomaticRequest, file)
    elif message.text == AUTO_BTNS[2]:
        data = AUTO_SUBS_DICT if file == FILE_AUTO_VIEWS else AUTO_REPS_DICT
        if data.keys():
            for chan in data.keys():
                BOT.send_message(message.from_user.id, PrintAutomaticRequest(chan, data), parse_mode='HTML')
        else:
            BOT.send_message(message.from_user.id, 'üîç –ù–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞—è–≤–æ–∫')
        ShowButtons(message, AUTO_BTNS, '‚ùî –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:')
        BOT.register_next_step_handler(message, AutomaticChannelDispatcher, file)
    elif message.text == AUTO_BTNS[3]:
        ShowButtons(message, WELCOME_BTNS, '‚ùî –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:')
    else:
        BOT.send_message(message.from_user.id, '‚ùå –Ø –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª...')
        ShowButtons(message, WELCOME_BTNS, '‚ùî –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:')


def AutomaticChannelAction(message: Message, file: str) -> None:
    Stamp('Automatic channel link inserting procedure', 'i')
    if message.text == CANCEL_BTN[0]:
        ShowButtons(message, WELCOME_BTNS, '‚ùî –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:')
    elif not message.text[0] == '@' and not match(LINK_FORMAT, message.text):
        ShowButtons(message, CANCEL_BTN, "‚ùå –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª –Ω–µ –ø–æ—Ö–æ–∂–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é. "
                                         "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏ "
                                         "(https://t.me/name –∏–ª–∏ @name)")
        BOT.register_next_step_handler(message, AutomaticChannelAction, file)
    else:
        global CUR_REQ
        CUR_REQ = {'initiator': f'{message.from_user.username} ‚Äì {message.from_user.id}'}
        cut_link = message.text.split('/')[-1]
        if cut_link[0] == '@':
            cut_link = cut_link[1:]
        CUR_REQ['link'] = cut_link
        ShowButtons(message, CANCEL_BTN, f'‚ùî –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ '
                                         f'–±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–≤–µ—Ä—à–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ —Å –Ω–æ–≤–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π '
                                         f'(–¥–æ—Å—Ç—É–ø–Ω–æ {len(ACCOUNTS)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤):')
        BOT.register_next_step_handler(message, AutomaticNumberProcedure, file)


def AutomaticNumberProcedure(message: Message, file: str) -> None:
    Stamp('Automatic number inserting procedure', 'i')
    try:
        if message.text == CANCEL_BTN[0]:
            ShowButtons(message, WELCOME_BTNS, '‚ùî –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:')
        else:
            if 0 < int(message.text) <= len(ACCOUNTS):
                CUR_REQ['annual'] = int(message.text)
                ShowButtons(message, CANCEL_BTN, "‚ùî –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏ (–≤ –º–∏–Ω—É—Ç–∞—Ö), –æ—Ç–≤–µ–¥—ë–Ω–Ω—ã–π –Ω–∞ –¥–µ–π—Å—Ç–≤–∏–µ")
                BOT.register_next_step_handler(message, AutomaticPeriod, file)
            else:
                ShowButtons(message, CANCEL_BTN, "‚ùå –í–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
                BOT.register_next_step_handler(message, AutomaticNumberProcedure, file)
    except ValueError:
        ShowButtons(message, CANCEL_BTN, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
        BOT.register_next_step_handler(message, AutomaticNumberProcedure, file)


def AutomaticPeriod(message: Message, path: str) -> None:
    Stamp('Automatic time inserting procedure', 'i')
    try:
        if message.text == CANCEL_BTN[0]:
            ShowButtons(message, WELCOME_BTNS, '‚ùî –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:')
        else:
            if 0 < int(message.text) < MAX_MINS:
                CUR_REQ['time_limit'] = int(message.text)
                BOT.send_message(message.from_user.id, '‚ùî –í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–±—Ä–æ—Å (–≤ %, –æ—Ç 0 –¥–æ 100), —Å –∫–æ—Ç–æ—Ä—ã–º —Ä–∞—Å—Å—á–∏—Ç–∞–µ—Ç—Å—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:')
                BOT.register_next_step_handler(message, InsertSpread, path)
            else:
                ShowButtons(message, CANCEL_BTN, "‚ùå –í–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
                BOT.register_next_step_handler(message, AutomaticPeriod, path)
    except ValueError:
        ShowButtons(message, CANCEL_BTN, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
        BOT.register_next_step_handler(message, AutomaticPeriod, path)


def AutomaticChoice(message: Message) -> None:
    if message.text == AUTO_CHOICE[0]:
        ShowButtons(message, AUTO_BTNS, '‚ùî –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:')
        BOT.register_next_step_handler(message, AutomaticChannelDispatcher, 'auto_views.json')
    elif message.text == AUTO_CHOICE[1]:
        ShowButtons(message, AUTO_BTNS, '‚ùî –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:')
        BOT.register_next_step_handler(message, AutomaticChannelDispatcher, 'auto_reps.json')
    elif message.text == AUTO_CHOICE[2]:
        ShowButtons(message, WELCOME_BTNS, '‚ùî –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:')
    else:
        BOT.send_message(message.from_user.id, '‚ùå –Ø –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª...')
        ShowButtons(message, WELCOME_BTNS, '‚ùî –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:')


def InsertSpread(message: Message, path: str) -> None:
    Stamp('Automatic spread inserting procedure', 'i')
    try:
        if message.text == CANCEL_BTN[0]:
            ShowButtons(message, WELCOME_BTNS, '‚ùî –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:')
        else:
            if 0 <= int(message.text) < 100:
                CUR_REQ['spread'] = int(message.text)
                CUR_REQ['approved'] = datetime.now().strftime(TIME_FORMAT)
                record = {'initiator': CUR_REQ['initiator'],
                          'time_limit': CUR_REQ['time_limit'],
                          'approved': CUR_REQ['approved'],
                          'annual': CUR_REQ['annual'],
                          'spread': CUR_REQ['spread']}
                if path == 'auto_views.json':
                    AUTO_SUBS_DICT[CUR_REQ['link']] = record
                    SaveRequestsToFile(AUTO_SUBS_DICT, 'automatic subs', 'auto_views.json')
                else:
                    AUTO_REPS_DICT[CUR_REQ['link']] = record
                    SaveRequestsToFile(AUTO_REPS_DICT, 'automatic reps', 'auto_reps.json')
                BOT.send_message(message.from_user.id, f"üÜó –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞. –ë—É–¥—É —Å–ª–µ–¥–∏—Ç—å –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –≤ –∫–∞–Ω–∞–ª–µ {CUR_REQ['link']}...")
                ShowButtons(message, WELCOME_BTNS, '‚ùî –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:')
            else:
                ShowButtons(message, CANCEL_BTN, "‚ùå –í–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
                BOT.register_next_step_handler(message, InsertSpread, path)
    except ValueError:
        ShowButtons(message, CANCEL_BTN, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
        BOT.register_next_step_handler(message, InsertSpread, path)
