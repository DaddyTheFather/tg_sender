from source import (BOT, IMG_PATH)
from common import Stamp
from random import choice
from requests import get
from PIL import Image
from io import BytesIO
from os import remove
from telethon.tl.functions.account import UpdateProfileRequest
from telethon.sync import TelegramClient
from telethon.tl.types import InputPhoneContact
from telethon.tl.functions.photos import UploadProfilePhotoRequest
from telethon.tl.functions.contacts import ImportContactsRequest
from random import randint


def GenerateRandomRussianName() -> (str, str):
    first_names = ['–ê–ª–µ–∫—Å–µ–π', '–ê–Ω–¥—Ä–µ–π', '–ë–æ—Ä–∏—Å', '–í–ª–∞–¥–∏–º–∏—Ä', '–ì–µ–æ—Ä–≥–∏–π', '–î–º–∏—Ç—Ä–∏–π', '–ï–≤–≥–µ–Ω–∏–π', '–ò–≥–æ—Ä—å', '–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω', '–ú–∞–∫—Å–∏–º']
    last_names = ['–ò–≤–∞–Ω–æ–≤', '–°–º–∏—Ä–Ω–æ–≤', '–ö—É–∑–Ω–µ—Ü–æ–≤', '–ü–æ–ø–æ–≤', '–°–æ–∫–æ–ª–æ–≤', '–õ–µ–±–µ–¥–µ–≤', '–ö–æ–∑–ª–æ–≤', '–ù–æ–≤–∏–∫–æ–≤', '–ú–æ—Ä–æ–∑–æ–≤', '–ü–µ—Ç—Ä–æ–≤']
    return choice(first_names), choice(last_names)


def GenerateRandomDescription() -> str:
    descriptions = [
        '–õ—é–±–ª—é –ø—É—Ç–µ—à–µ—Å—Ç–≤–æ–≤–∞—Ç—å –∏ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –Ω–æ–≤—ã–µ –º–µ—Å—Ç–∞.',
        '–§–∞–Ω–∞—Ç —Å–ø–æ—Ä—Ç–∞ –∏ –∑–¥–æ—Ä–æ–≤–æ–≥–æ –æ–±—Ä–∞–∑–∞ –∂–∏–∑–Ω–∏.',
        '–í–µ–¥—É –±–ª–æ–≥ –æ –∫—É–ª–∏–Ω–∞—Ä–∏–∏ –∏ —Ä–µ—Ü–µ–ø—Ç–∞—Ö.',
        '–ò–Ω—Ç–µ—Ä–µ—Å—É—é—Å—å –∏—Å–∫—É—Å—Å—Ç–≤–æ–º –∏ –∫—É–ª—å—Ç—É—Ä–æ–π.',
        '–ó–∞–Ω–∏–º–∞—é—Å—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π –∏ –≤–∏–¥–µ–æ—Å—ä–µ–º–∫–æ–π.'
    ]
    return choice(descriptions)


def GetRandomProfilePicture(user_id: int) -> str | None:
    try:
        response = get('https://picsum.photos/400')
    except ConnectionError as e:
        BOT.send_message(user_id, f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è')
        Stamp(f'Failed to get random image: {e}', 'e')
        return None
    else:
        img = Image.open(BytesIO(response.content))
        img.save(IMG_PATH)
        return IMG_PATH


async def SetProfilePicture(client: TelegramClient, user_id: int) -> None:
    Stamp('Setting profile picture', 'i')
    BOT.send_message(user_id, 'üñº –ò–∑–º–µ–Ω—è—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ø—Ä–æ—Ñ–∏–ª—è...')
    file = await client.upload_file(IMG_PATH)
    await client(UploadProfilePhotoRequest(file))
    remove(IMG_PATH)


async def SetProfileInfo(client: TelegramClient, user_id: int) -> None:
    Stamp('Setting profile info', 'i')
    BOT.send_message(user_id, 'üìù –ò–∑–º–µ–Ω—è—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–æ—Ñ–∏–ª—è...')
    first_name, last_name = GenerateRandomRussianName()
    about = GenerateRandomDescription()
    await client(UpdateProfileRequest(first_name=first_name,
                                      last_name=last_name,
                                      about=about))


async def AddContacts(client: TelegramClient, num: int, user_id: int) -> None:
    Stamp(f'Adding {num} contacts', 'i')
    BOT.send_message(user_id, f'üìû –î–æ–±–∞–≤–ª—è—é {num} –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤...')
    contacts = []
    for _ in range(num):
        first_name, last_name = GenerateRandomRussianName()
        phone = f'+{randint(1, 99)}{randint(1000000000, 9999999999)}'
        contact = InputPhoneContact(client_id=randint(0, 999999),
                                    phone=phone,
                                    first_name=first_name,
                                    last_name=last_name)
        contacts.append(contact)
    await client(ImportContactsRequest(contacts))
