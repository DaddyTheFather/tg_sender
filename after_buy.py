from source import (BOT, NEW_CHAT_ID, IMG_PATH,
                    EXTRA_SHEET_NAME, SHORT_SLEEP, NEW_ROW_TO_ADD)
from secret import SHEET_ID
from common import Stamp, GetSector, BuildService
from random import choice
from requests import get
from PIL import Image
from io import BytesIO
from os import remove, getcwd
from os.path import join
from telethon.tl.functions.account import UpdateProfileRequest
from telethon.sync import TelegramClient
from telethon.tl.functions.photos import UploadProfilePhotoRequest
from socks import SOCKS5
from telethon.errors import (PhoneCodeInvalidError,
                             PhoneCodeExpiredError,
                             SessionPasswordNeededError,
                             PhoneNumberInvalidError)
from common import SkippedCodeInsertion, ParseAccountRow
from traceback import format_exc
from auth import AuthCallback
from asyncio import sleep as async_sleep


async def CheckNewAuth() -> None:
    global NEW_ROW_TO_ADD
    while True:
        if NEW_ROW_TO_ADD:
            BOT.send_message(NEW_CHAT_ID, 'üîê –ê–≤—Ç–æ—Ä–∏–∑—É—é –∞–∫–∫–∞—É–Ω—Ç, –æ–∂–∏–¥–∞–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è...')
            Stamp(f'New row to add is set, authorizing account on row {NEW_ROW_TO_ADD}', 'i')
            await AuthNewAccount(NEW_ROW_TO_ADD)
            NEW_ROW_TO_ADD = None
        await async_sleep(SHORT_SLEEP)


def GenerateRandomRussianName():
    first_names = ['–ê–ª–µ–∫—Å–µ–π', '–ê–Ω–¥—Ä–µ–π', '–ë–æ—Ä–∏—Å', '–í–ª–∞–¥–∏–º–∏—Ä', '–ì–µ–æ—Ä–≥–∏–π', '–î–º–∏—Ç—Ä–∏–π', '–ï–≤–≥–µ–Ω–∏–π', '–ò–≥–æ—Ä—å', '–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω', '–ú–∞–∫—Å–∏–º']
    last_names = ['–ò–≤–∞–Ω–æ–≤', '–°–º–∏—Ä–Ω–æ–≤', '–ö—É–∑–Ω–µ—Ü–æ–≤', '–ü–æ–ø–æ–≤', '–°–æ–∫–æ–ª–æ–≤', '–õ–µ–±–µ–¥–µ–≤', '–ö–æ–∑–ª–æ–≤', '–ù–æ–≤–∏–∫–æ–≤', '–ú–æ—Ä–æ–∑–æ–≤', '–ü–µ—Ç—Ä–æ–≤']
    return choice(first_names), choice(last_names)


def GenerateRandomDescription():
    descriptions = [
        '–õ—é–±–ª—é –ø—É—Ç–µ—à–µ—Å—Ç–≤–æ–≤–∞—Ç—å –∏ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –Ω–æ–≤—ã–µ –º–µ—Å—Ç–∞.',
        '–§–∞–Ω–∞—Ç —Å–ø–æ—Ä—Ç–∞ –∏ –∑–¥–æ—Ä–æ–≤–æ–≥–æ –æ–±—Ä–∞–∑–∞ –∂–∏–∑–Ω–∏.',
        '–í–µ–¥—É –±–ª–æ–≥ –æ –∫—É–ª–∏–Ω–∞—Ä–∏–∏ –∏ —Ä–µ—Ü–µ–ø—Ç–∞—Ö.',
        '–ò–Ω—Ç–µ—Ä–µ—Å—É—é—Å—å –∏—Å–∫—É—Å—Å—Ç–≤–æ–º –∏ –∫—É–ª—å—Ç—É—Ä–æ–π.',
        '–ó–∞–Ω–∏–º–∞—é—Å—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π –∏ –≤–∏–¥–µ–æ—Å—ä–µ–º–∫–æ–π.'
    ]
    return choice(descriptions)


def GetRandomProfilePicture() -> str | None:
    try:
        response = get('https://picsum.photos/400')
    except ConnectionError as e:
        BOT.send_message(NEW_CHAT_ID, f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è')
        Stamp(f'Failed to get random image: {e}', 'e')
        return None
    else:
        img = Image.open(BytesIO(response.content))
        img.save(IMG_PATH)
        return IMG_PATH


async def SetProfilePicture(client, path: str):
    file = await client.upload_file(path)
    await client(UploadProfilePhotoRequest(file))
    remove(path)


# async def AddRandomContact(client):
#     random_contact = InputPhoneContact(
#         client_id=randint(0, 999999),
#         phone='+' + str(randint(10000000000, 99999999999)),
#         first_name=GenerateRandomRussianName()[0],
#         last_name=GenerateRandomRussianName()[1]
#     )
#     try:
#         result = await client(ImportContactsRequest(
#             contacts=[random_contact]
#         ))
#         if result.imported:
#             input_user = result.imported[0].user_id
#             await client(AddContactRequest(
#                 id=InputUser(input_user, 0),
#                 first_name=random_contact.first_name,
#                 last_name=random_contact.last_name,
#                 phone=random_contact.phone,
#                 add_phone_privacy_exception=False
#             ))
#     except Exception as e:
#         Stamp(f'Failed to add contact: {e}', 'e')


# async def SetTwoFactorPassword(client, new_password: str):
#     try:
#         current_password = await client(GetPasswordRequest())
#         new_srp_password = compute_check(
#             current_password.new_algo, new_password
#         )
#
#         await client(UpdatePasswordSettingsRequest(
#             password=current_password.new_algo,
#             new_settings=types.account.PasswordInputSettings(
#                 new_algo=new_srp_password['algo'],
#                 new_password_hash=new_srp_password['hash'],
#                 hint='My password hint'
#             )
#         ))
#         Stamp(f'2FA password set successfully', 's'
#     except Exception as e:
#         Stamp(f'Error while setting 2FA password: {e}', 'e')


async def AuthNewAccount(row: int) -> None:
    data = GetSector(f'A{row}', f'H{row}', BuildService(), EXTRA_SHEET_NAME, SHEET_ID)[0]
    try:
        num, api_id, api_hash, password_tg, ip, port, login, password_proxy = ParseAccountRow(data)
    except IndexError:
        Stamp(f'Invalid account data in row {row}', 'e')
        BOT.send_message(NEW_CHAT_ID, f'‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ —Å—Ç—Ä–æ–∫–µ {row}!')
        return
    tg_session = join(getcwd(), 'sessions', f'{num}')
    client = TelegramClient(tg_session, api_id, api_hash, proxy=(SOCKS5, ip, port, True, login, password_proxy))
    try:
        await client.start(phone=num, password=password_tg, code_callback=lambda: AuthCallback(num))
        Stamp(f'Account {num} authorized', 's')
        BOT.send_message(NEW_CHAT_ID, f'‚úÖ –ê–∫–∫–∞—É–Ω—Ç {num} –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω')
        first_name, last_name = GenerateRandomRussianName()
        await client(UpdateProfileRequest(first_name=first_name, last_name=last_name, about=GenerateRandomDescription()))
        await SetProfilePicture(client, IMG_PATH)
        # await AddRandomContact(client)
        # await SetTwoFactorPassword(client, 'Arkana')
        Stamp('Changed all data for the account', 's')
        BOT.send_message(NEW_CHAT_ID, f'üñç –ò–∑–º–µ–Ω–∏–ª –¥–∞–Ω–Ω—ã–µ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ')
    except PhoneCodeInvalidError:
        BOT.send_message(NEW_CHAT_ID, f'‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –¥–ª—è –Ω–æ–º–µ—Ä–∞ {num}.')
        Stamp(f'Invalid code for {num}', 'e')
    except PhoneCodeExpiredError:
        BOT.send_message(NEW_CHAT_ID, f'‚ùå –ò—Å—Ç–µ–∫–ª–æ –≤—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è –∫–æ–¥–∞ –¥–ª—è –Ω–æ–º–µ—Ä–∞ {num}.')
        Stamp(f'Code expired for {num}', 'e')
    except SessionPasswordNeededError:
        BOT.send_message(NEW_CHAT_ID, f'‚ùóÔ∏è–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–ª—è –Ω–æ–º–µ—Ä–∞ {num}.')
        Stamp(f'2FA needed for {num}', 'w')
    except PhoneNumberInvalidError:
        BOT.send_message(NEW_CHAT_ID, f'‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ {num}.')
        Stamp(f'Invalid phone number {num}', 'e')
    except SkippedCodeInsertion:
        Stamp(f'Skipping code insertion for {num}', 'w')
        BOT.send_message(NEW_CHAT_ID, f'üëå –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç {num}...')
    except TimeoutError:
        Stamp('Too long code waiting', 'w')
        BOT.send_message(NEW_CHAT_ID, f'‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–¥–∞ –¥–ª—è {num}!')
    except Exception as e:
        Stamp(f'Error while starting client for {num}: {e}, {format_exc()}', 'e')
        BOT.send_message(NEW_CHAT_ID, f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è {num}: {str(e)}')
