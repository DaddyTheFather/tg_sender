from telebot.types import Message
from source import (CANCEL_BTN, WELCOME_BTNS, BNT_NUM_OPERATION,
                    CREATE_APP_BTN, BOT, LONG_SLEEP, FAKER,
                    URL_BUY, MAX_ACCOUNTS_BUY, URL_CANCEL, URL_SMS,
                    URL_API_GET_CODE, URL_API_LOGIN, URL_API_GET_APP,
                    URL_API_CREATE_APP, URL_GET_TARIFFS, LEFT_CORNER,
                    SMALL_RIGHT_CORNER, EXTRA_SHEET_NAME, GET_API_CODE_BTN)
from secret import TOKEN_SIM, SHEET_ID
from common import ShowButtons, Sleep, Stamp, ControlRecursion, UploadData, GetSector, BuildService
from info_senders import SendTariffInfo
from requests import get, Session
from headers_agents import HEADERS
from re import search, MULTILINE, IGNORECASE
from bs4 import BeautifulSoup


def AddAccounts(message: Message) -> None:
    if message.text == CANCEL_BTN[0]:
        ShowButtons(message, WELCOME_BTNS, '‚ùî –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:')
        return
    try:
        req_quantity = int(message.text)
    except ValueError:
        ShowButtons(message, CANCEL_BTN, f'‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ. –í–≤–µ–¥–∏—Ç–µ –æ—Ç 0 –¥–æ {MAX_ACCOUNTS_BUY}:')
        BOT.register_next_step_handler(message, AddAccounts)
        return
    if req_quantity > MAX_ACCOUNTS_BUY or req_quantity <= 0:
        ShowButtons(message, CANCEL_BTN, f'‚ùå –í–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ. –í–≤–µ–¥–∏—Ç–µ –æ—Ç 0 –¥–æ {MAX_ACCOUNTS_BUY}:')
        BOT.register_next_step_handler(message, AddAccounts)
        return
    country_data = GetTariffInfo(message)
    BOT.send_message(message.from_user.id, 'üìå –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∂–µ–ª–∞–µ–º–æ–π —Å—Ç—Ä–∞–Ω—ã:')
    msg, avail_codes = SendTariffInfo(country_data)
    BOT.send_message(message.from_user.id, msg)
    BOT.register_next_step_handler(message, ChooseCountry, req_quantity, avail_codes)


def ChooseCountry(message: Message, req_quantity: int, avail_codes: list) -> None:
    if message.text == CANCEL_BTN[0]:
        ShowButtons(message, WELCOME_BTNS, '‚ùî –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:')
        return
    try:
        country_code = int(message.text)
    except ValueError:
        ShowButtons(message, CANCEL_BTN, '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, 7):')
        BOT.register_next_step_handler(message, ChooseCountry, req_quantity)
        return
    if country_code not in avail_codes:
        ShowButtons(message, CANCEL_BTN, '‚ùå –í–≤–µ–¥–µ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:')
        BOT.register_next_step_handler(message, ChooseCountry, req_quantity)
        return
    Stamp(f'Chosen country: {message.text}', 'i')
    BOT.send_message(message.from_user.id, f'üîÅ –í—ã–±—Ä–∞–Ω–∞ —Å—Ç—Ä–∞–Ω–∞: {message.text}. –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∫—É–ø–∫–∏...')
    AddAccountRecursive(message, 0, req_quantity, country_code)


def AddAccountRecursive(message: Message, current_index: int, total: int, country_code: int) -> None:
    if current_index >= total:
        BOT.send_message(message.from_user.id, f'‚úÖ –ë—ã–ª–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {total} –∞–∫–∫–∞—É–Ω—Ç–æ–≤')
        ShowButtons(message, WELCOME_BTNS, '‚ùî –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:')
        return
    Stamp(f'Adding {current_index + 1} account', 'i')
    BOT.send_message(message.from_user.id, f'‚ñ´Ô∏è –î–æ–±–∞–≤–ª—è—é {current_index + 1}-–π –∞–∫–∫–∞—É–Ω—Ç')
    try:
        num, tzid = BuyAccount(message, country_code)
    except RecursionError:
        Stamp(f'Exiting because of buying fail', 'w')
        BOT.send_message(message.from_user.id, '‚ùóÔ∏è –ó–∞–≤–µ—Ä—à–∞—é –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∫—É–ø–∫–∏...')
        ShowButtons(message, WELCOME_BTNS, '‚ùî –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:')
        return
    ShowButtons(message, BNT_NUM_OPERATION, '‚ùï –ï—Å–ª–∏ –∞–∫–∫–∞—É–Ω—Ç –Ω—É–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π')
    BOT.register_next_step_handler(message, AbilityToCancel, num, tzid, current_index, total, country_code)


@ControlRecursion
def BuyAccount(message: Message, country_code: int) -> tuple:
    try:
        response = get(URL_BUY, params={'apikey': TOKEN_SIM, 'service': 'telegram', 'country': country_code, 'number': True, 'lang': 'ru'})
    except ConnectionError as e:
        Stamp(f'Failed to connect to the server while buying account: {e}', 'e')
        BOT.send_message(message.from_user.id, f'‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º –ø–æ–∫—É–ø–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤, '
                                               f'–ø—Ä–æ–±—É—é –µ—â—ë —Ä–∞–∑ —á–µ—Ä–µ–∑ {LONG_SLEEP} —Å–µ–∫—É–Ω–¥...')
        Sleep(LONG_SLEEP)
        num, tzid = BuyAccount(message)
    else:
        if str(response.status_code)[0] == '2':
            if 'number' in response.json():
                num = response.json()['number']
                tzid = response.json()['tzid']
                Stamp(f'Bought account: {num}', 's')
                BOT.send_message(message.from_user.id, f'üì± –ö—É–ø–ª–µ–Ω –Ω–æ–º–µ—Ä {num}')
            else:
                Stamp(f'No "number" field in response <-> no available numbers in this region', 'e')
                BOT.send_message(message.from_user.id, '‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –≤ —ç—Ç–æ–º —Ä–µ–≥–∏–æ–Ω–µ, '
                                                       '–ø—Ä–µ–∫—Ä–∞—â–∞—é –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∫—É–ø–∫–∏...')
                raise RecursionError
        else:
            Stamp(f'Failed to buy account: {response.text}', 'e')
            BOT.send_message(message.from_user.id, f'‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∫—É–ø–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç, '
                                                   f'–ø—Ä–æ–±—É—é –µ—â—ë —Ä–∞–∑ —á–µ—Ä–µ–∑ {LONG_SLEEP} —Å–µ–∫—É–Ω–¥...')
            Sleep(LONG_SLEEP)
            num, tzid = BuyAccount(message)
    return num, tzid


def AbilityToCancel(message: Message, num: str, tzid: str, current_index: int, total: int, country_code: int) -> None:
    if message.text == BNT_NUM_OPERATION[1]:
        Stamp(f'Cancelling number {num}', 'w')
        BOT.send_message(message.from_user.id, f'üÜó –û—Ç–º–µ–Ω—è—é –Ω–æ–º–µ—Ä {num} (–∑–∞–Ω–∏–º–∞–µ—Ç –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è)...')
        try:
            CancelNumber(message, num, tzid)
        except RecursionError:
            Stamp('Too many tries to cancel num, returning', 'w')
            BOT.send_message(message.from_user.id, 'üõë –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ –æ—Ç–º–µ–Ω—ã –Ω–æ–º–µ—Ä–∞, '
                                                   '–ø–µ—Ä–µ—Ö–æ–∂—É –∫ —Å–ª–µ–¥—É—é—â–µ–º—É...')
        AddAccountRecursive(message, current_index + 1, total, country_code)
        return
    elif message.text == BNT_NUM_OPERATION[0]:
        ProcessAccountSms(message, num, tzid, current_index, total, country_code)
        return


def SendAPICode(message: Message, num: str) -> None:
    Stamp('Sending request to authorize on API', 'i')
    BOT.send_message(message.from_user.id, f'üìÆ –û—Ç–ø—Ä–∞–≤–ª—è—é –∫–æ–¥ –Ω–∞ –Ω–æ–º–µ—Ä {num} –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ API')
    try:
        session, rand_hash = RequestAPICode(message, num)
    except RecursionError:
        Stamp(f'Exiting because of requesting code fail', 'w')
        BOT.send_message(message.from_user.id, '‚ùóÔ∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫,'
                                  '–∑–∞–≤–µ—Ä—à–∞—é –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∫—É–ø–∫–∏...')
        return
    BOT.register_next_step_handler(message, HandleAPICode, session, num, rand_hash)


@ControlRecursion
def RequestAPICode(message: Message, num: str) -> (Session, str):
    session = Session()
    try:
        response = session.post(URL_API_GET_CODE, headers=HEADERS, data={'phone': num})
    except ConnectionError as e:
        Stamp(f'Failed to connect to the server while requesting API code: {e}', 'e')
        BOT.send_message(message.from_user.id, f'‚ÄºÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å API –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–¥–∞, '
                                               f'–ø—Ä–æ–±—É—é –µ—â—ë —Ä–∞–∑ –ø—Ä–∏–º–µ—Ä–Ω–æ —á–µ—Ä–µ–∑ {LONG_SLEEP} —Å–µ–∫—É–Ω–¥...')
        Sleep(LONG_SLEEP, 0.5)
        session, rand_hash = RequestAPICode(message, num)
    else:
        if str(response.status_code)[0] == '2':
            Stamp(f'Sent API code to {num}', 's')
            BOT.send_message(message.from_user.id, f'üí¨ –ö–æ–¥ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ API –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {num}, '
                                                   f'–ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç Telegram.\n‚ö†Ô∏è –í –æ—Ç–≤–µ—Ç –ø–µ—Ä–µ—à–ª–∏—Ç–µ –º–Ω–µ'
                                                   f'–≤—Å—ë —Å–æ–æ–±—â–µ–Ω–∏–µ —Ü–µ–ª–∏–∫–æ–º.')
            print(response.json())
            rand_hash = response.json()['random_hash']
        else:
            Stamp(f'Failed to send API code to {num}: {response.text}', 'e')
            BOT.send_message(message.from_user.id, f'‚ÄºÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–¥ –¥–ª—è API, '
                                                   f'–ø—Ä–æ–±—É—é –µ—â—ë —Ä–∞–∑ –ø—Ä–∏–º–µ—Ä–Ω–æ —á–µ—Ä–µ–∑ {LONG_SLEEP} —Å–µ–∫—É–Ω–¥...')
            Sleep(LONG_SLEEP, 0.5)
            session, rand_hash = RequestAPICode(message, num)
    return session, rand_hash


@ControlRecursion
def CancelNumber(message: Message, num: str, tzid: str) -> None:
    try:
        response = get(URL_CANCEL, params={'apikey': TOKEN_SIM, 'tzid': tzid, 'ban': 1, 'lang': 'ru'})
    except ConnectionError as e:
        Stamp(f'Failed to connect to the server while cancelling number {num}: {e}', 'e')
        BOT.send_message(message.from_user.id, f'‚ÄºÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º –¥–ª—è –æ—Ç–º–µ–Ω—ã –Ω–æ–º–µ—Ä–∞, '
                                               f'–ø—Ä–æ–±—É—é –µ—â—ë —Ä–∞–∑ –ø—Ä–∏–º–µ—Ä–Ω–æ —á–µ—Ä–µ–∑ {LONG_SLEEP} —Å–µ–∫—É–Ω–¥...')
        Sleep(LONG_SLEEP, 0.5)
        CancelNumber(message, num, tzid)
    else:
        if str(response.status_code)[0] == '2' and str(response.json()['response']) == '1':
            Stamp(f'Successful cancelling of number {num}', 's')
            BOT.send_message(message.from_user.id, f'‚ùáÔ∏è –ù–æ–º–µ—Ä {num} –æ—Ç–º–µ–Ω—ë–Ω')
        else:
            Stamp(f'Failed to cancel number {num}: {response.text}', 'w')
            BOT.send_message(message.from_user.id, f'‚ÑπÔ∏è –ü–æ–∫–∞ —á—Ç–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä, '
                                                    f'–ø—Ä–æ–±—É—é –µ—â—ë —Ä–∞–∑ —á–µ—Ä–µ–∑ {LONG_SLEEP * 2} —Å–µ–∫—É–Ω–¥...')
            Sleep(LONG_SLEEP * 2)
            CancelNumber(message, num, tzid)


def ProcessAccountSms(message: Message, num: str, tzid: str, current_index: int, total: int, country_code: int) -> None:
    Stamp(f'Checking for all sms', 'i')
    sms_dict = CheckAllSms(message)
    if sms_dict and num in sms_dict:
        Stamp('Found incoming sms for recently bought number', 's')
        BOT.send_message(message.from_user.id, f'üì≤ –î–ª—è –Ω–æ–º–µ—Ä–∞ {num} –Ω–∞—à—ë–ª –∫–æ–¥: {sms_dict[num]}')
        ShowButtons(message, GET_API_CODE_BTN, '‚ùî –ö–∞–∫ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É')
        BOT.register_next_step_handler(message, SendAPICode, num)
    else:
        Stamp(f'No incoming sms for {num}', 'w')
        BOT.send_message(message.from_user.id, f'üí§ –ù–µ –≤–∏–∂—É –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è {num}')
        ShowButtons(message, BNT_NUM_OPERATION, '‚ùî –ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?')
        BOT.register_next_step_handler(message, AbilityToCancel, num, tzid, current_index, total, country_code)


def CheckAllSms(message: Message) -> dict | None:
    res = {}
    try:
        response = get(URL_SMS, params={'apikey': TOKEN_SIM})
    except ConnectionError as e:
        Stamp(f'Failed to connect to the server: {e}', 'e')
        BOT.send_message(message.from_user.id, f'‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–æ–≤...')
    else:
        if str(response.status_code)[0] == '2':
            Stamp('See some data about sms', 's')
            for item in response.json():
                if 'msg' in item:
                    res[item['number']] = item['msg']
        else:
            Stamp(f'Failed to get list of sms: {response.text}', 'e')
            BOT.send_message(message.from_user.id, f'‚ùå –°—Ç–∞—Ç—É—Å {response.status_code} –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–º—Å...')
    return res


@ControlRecursion
def GetTariffInfo(message: Message) -> dict:
    try:
        response = get(URL_GET_TARIFFS, params={'apikey': TOKEN_SIM})
    except ConnectionError as e:
        Stamp(f'Failed to connect to the server while getting tariffs: {e}', 'e')
        BOT.send_message(message.from_user.id, f'‚ÄºÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∞—Ä–∏—Ñ–æ–≤, '
                                               f'–ø—Ä–æ–±—É—é –µ—â—ë —Ä–∞–∑ –ø—Ä–∏–º–µ—Ä–Ω–æ —á–µ—Ä–µ–∑ {LONG_SLEEP} —Å–µ–∫—É–Ω–¥...')
        Sleep(LONG_SLEEP, 0.5)
        data = GetTariffInfo(message, TOKEN_SIM)
    else:
        if str(response.status_code)[0] == '2':
            Stamp('Successfully got tariffs', 's')
            BOT.send_message(message.from_user.id, f'üîÅ –ü–æ–ª—É—á–∏–ª —Ç–∞—Ä–∏—Ñ—ã')
            data = response.json()
        else:
            Stamp(f'Failed to get tariffs: {response.text}', 'w')
            BOT.send_message(message.from_user.id, f'‚ÑπÔ∏è –ü–æ–∫–∞ —á—Ç–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–∞—Ä–∏—Ñ—ã, '
                                                    f'–ø—Ä–æ–±—É—é –µ—â—ë —Ä–∞–∑ —á–µ—Ä–µ–∑ {LONG_SLEEP * 2} —Å–µ–∫—É–Ω–¥...')
            Sleep(LONG_SLEEP * 2)
            data = GetTariffInfo(message, TOKEN_SIM)
    return data


def ExtractCodeFromMessage(text: str) -> str | None:
    pattern = r'–í–æ—Ç –æ–Ω:\s*(\S+)'
    found = search(pattern, text, MULTILINE)
    if found:
        return found.group(1)
    return None


def HandleAPICode(message: Message, session: Session, num: str, rand_hash: str) -> None:
    code = ExtractCodeFromMessage(message.text)
    if not code:
        Stamp('No valid API code from user found, exiting...', 'e')
        BOT.send_message(message.from_user.id, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∫–æ–¥ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è, –∑–∞–≤–µ—Ä—à–∞—é –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∫—É–ø–∫–∏...')
        return
    Stamp(f'API code received for number {num}: {code}', 's')
    BOT.send_message(message.from_user.id, f'‚ú≥Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–æ–¥: {code}')
    try:
        session = LoginAPI(message, session, num, rand_hash, code)
    except RecursionError as e:
        Stamp(f'Failed to login into API: {e}', 'e')
        BOT.send_message(message.from_user.id, f'üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ API —Å –Ω–æ–º–µ—Ä–∞ {num}, '
                                               f'–ø–µ—Ä–µ—Ö–æ–∂—É –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –Ω–æ–º–µ—Ä—É...')
        return
    Stamp(f'Getting hash for account {num}', 'i')
    BOT.send_message(message.from_user.id, f'üîë –ü–æ–ª—É—á–∞—é —Ö–µ—à –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {num}')
    try:
        cur_hash = GetHash(message, session)
    except RecursionError as e:
        Stamp(f'Failed to get hash: {e}', 'e')
        BOT.send_message(message.from_user.id, f'‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ö–µ—à –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {num}, '
                                               f'–∑–∞–≤–µ—Ä—à–∞—é –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∫—É–ø–∫–∏...')
        return
    ShowButtons(message, CREATE_APP_BTN, '‚ùî –ù–∞–∂–º–∏—Ç–µ, –∫–∞–∫ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã —Å–æ–∑–¥–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ')
    BOT.register_next_step_handler(message, FinalStep, session, num, cur_hash)


@ControlRecursion
def LoginAPI(message: Message, session: Session, num: str, rand_hash: str, code: str) -> Session:
    data = {
        'phone': num,
        'random_hash': rand_hash,
        'password': code,
    }
    try:
        response = session.post(URL_API_LOGIN, headers=HEADERS, data=data)
    except ConnectionError as e:
        Stamp(f'Failed to connect to the server during API login: {e}', 'e')
        BOT.send_message(message.from_user.id, f'‚ÄºÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å API –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, '
                                               f'–ø—Ä–æ–±—É—é –µ—â—ë —Ä–∞–∑ –ø—Ä–∏–º–µ—Ä–Ω–æ —á–µ—Ä–µ–∑ {LONG_SLEEP} —Å–µ–∫—É–Ω–¥...')
        Sleep(LONG_SLEEP, 0.5)
        session = LoginAPI(message, session, num, rand_hash, code)
    else:
        if str(response.status_code)[0] == '2':
            Stamp(f'Logined into API for number {num}', 's')
            BOT.send_message(message.from_user.id, f'‚ùáÔ∏è –ó–∞—à—ë–ª –≤ API –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {num}')
        else:
            Stamp(f'Failed to login into API: {response.text}', 'e')
            BOT.send_message(message.from_user.id, f'üõë –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–π—Ç–∏ –≤ API –¥–ª—è –Ω–æ–º–µ—Ä–∞ {num}, '
                                                   f'–ø—Ä–æ–±—É—é –µ—â—ë —Ä–∞–∑ –ø—Ä–∏–º–µ—Ä–Ω–æ —á–µ—Ä–µ–∑ {LONG_SLEEP} —Å–µ–∫—É–Ω–¥...')
            Sleep(LONG_SLEEP, 0.5)
            session = LoginAPI(message, session, num, rand_hash, code)
    return session


def GetHash(message: Message, session: Session) -> str:
    try:
        response = session.get(URL_API_GET_APP, headers=HEADERS)
    except ConnectionError as e:
        Stamp(f'Failed to connect to the server during hash requesting: {e}', 'e')
        BOT.send_message(message.from_user.id, f'‚ÄºÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Å–∞–π—Ç–æ–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ö–µ—à–∞, '
                                               f'–ø—Ä–æ–±—É—é –µ—â—ë —Ä–∞–∑ –ø—Ä–∏–º–µ—Ä–Ω–æ —á–µ—Ä–µ–∑ {LONG_SLEEP} —Å–µ–∫—É–Ω–¥...')
        Sleep(LONG_SLEEP, 0.5)
        cur_hash = GetHash(message, session)
    else:
        if str(response.status_code)[0] == '2':
            Stamp(f'Got HTML page for hash', 's')
            BOT.send_message(message.from_user.id, f'‚ôªÔ∏è –ü–æ–ª—É—á–∏–ª —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–∞–π—Ç–∞, –∏—â—É –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ')
            cur_hash = ParseHash(message, response.text)
        else:
            Stamp('Did not got HTML page for hash', 'e')
            BOT.send_message(message.from_user.id, f'üìõ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–∞–π—Ç–∞ —Å —Ö–µ—à–µ–º, '
                             f'–ø—Ä–æ–±—É—é –µ—â—ë —Ä–∞–∑ –ø—Ä–∏–º–µ—Ä–Ω–æ —á–µ—Ä–µ–∑ {LONG_SLEEP} —Å–µ–∫—É–Ω–¥...')
            Sleep(LONG_SLEEP, 0.5)
            cur_hash = GetHash(message, session)
    return cur_hash


def ParseHash(message: Message, page: str) -> str | None:
    Stamp('Parsing hash from HTML page', 'i')
    BOT.send_message(message.from_user.id, 'üîç –ò—â—É —Ö–µ—à –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ...')
    soup = BeautifulSoup(page, 'html.parser')
    hash_input = soup.find('input', {'name': 'hash'})
    if hash_input:
        BOT.send_message(message.from_user.id, f'‚úÖ –ù–∞—à—ë–ª —Ö–µ—à: {hash_input.get("value")}')
        Stamp(f'Got hash: {hash_input.get("value")}', 's')
        return hash_input.get('value')
    Stamp('Did not got hash', 'e')
    BOT.send_message(message.from_user.id, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ö–µ—à –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ')
    return None


def FinalStep(message: Message, session: Session, num: str, cur_hash: str) -> None:
    Stamp(f'Creating app for account {num}', 'i')
    BOT.send_message(message.from_user.id, f'üî® –°–æ–∑–¥–∞—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {num}')
    try:
        CreateApp(message, session, num, cur_hash)
    except RecursionError as e:
        Stamp(f'Failed to create app: {e}', 'e')
        BOT.send_message(message.from_user.id, f'üìõ –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {num}')
        return
    BOT.send_message(message.from_user.id, f'‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {num}, –∂–¥—É {LONG_SLEEP} —Å–µ–∫—É–Ω–¥...')
    Sleep(LONG_SLEEP)
    Stamp(f'Getting HTML page for number {num}', 'i')
    BOT.send_message(message.from_user.id, f'‚è© –ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ –æ–± API_ID –∏ API_HASH...')
    try:
        api_id, api_hash = GetAppData(message, session)
    except RecursionError:
        Stamp(f'Exiting because of getting app data fail', 'w')
        BOT.send_message(message.from_user.id, '‚ùóÔ∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫,'
                                  '–∑–∞–≤–µ—Ä—à–∞—é –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∫—É–ø–∫–∏...')
        return
    Stamp(f'Got api_id: {api_id} and api_hash: {api_hash} for number {num}', 's')
    BOT.send_message(message.from_user.id, f'‚úÖ –ü–æ–ª—É—á–∏–ª –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–º–µ—Ä–∞ {num}:\n'
                                           f'API_ID: {api_id}\n'
                                           f'API_HASH: {api_hash}\n'
                                           f'‚ñ∂Ô∏è –ó–∞–Ω–æ—à—É –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü—É...')
    srv = BuildService()
    row = len(GetSector(LEFT_CORNER, SMALL_RIGHT_CORNER, srv, EXTRA_SHEET_NAME, SHEET_ID)) + 2
    UploadData([[num[1:], api_id, api_hash, '-']], EXTRA_SHEET_NAME, SHEET_ID, srv, row)
    Stamp(f'Data for number {num} added to the table', 's')
    BOT.send_message(message.from_user.id, f'üìä –î–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–º–µ—Ä–∞ {num} –∑–∞–Ω–µ—Å–µ–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü—É')


def GenerateRandomWord(min_length: int) -> str:
    word = FAKER.word()
    while len(word) < min_length:
        word += f's{FAKER.word()}'
    return word


def CreateApp(message: Message, session: Session, num: str, cur_hash: str) -> None:
    data = {
        'hash': cur_hash,
        'app_title': GenerateRandomWord(10),
        'app_shortname': GenerateRandomWord(7),
        'app_url': '',
        'app_platform': 'android',
        'app_desc': '',
    }
    try:
        response = session.post(URL_API_CREATE_APP, headers=HEADERS, data=data)
    except ConnectionError as e:
        Stamp(f'Failed to connect to the server during app creation: {e}', 'e')
        BOT.send_message(message.from_user.id, f'‚ÄºÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, '
                                               f'–ø–µ—Ä–µ—Ö–æ–∂—É –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –Ω–æ–º–µ—Ä—É...')
    else:
        if str(response.status_code)[0] == '2':
            Stamp(f'App created for number {num}', 's')
            BOT.send_message(message.from_user.id, f'üîß –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ –¥–ª—è –Ω–æ–º–µ—Ä–∞ {num}')
        else:
            Stamp(f'Failed to create app for number {num}: {response.text}', 'e')
            BOT.send_message(message.from_user.id, f'üìõ –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –Ω–æ–º–µ—Ä–∞ {num}')


@ControlRecursion
def GetAppData(message: Message, session: Session) -> (str, str):
    try:
        response = session.get(URL_API_GET_APP, headers=HEADERS)
    except ConnectionError as e:
        Stamp(f'Failed to connect to the server during app data requesting: {e}', 'e')
        BOT.send_message(message.from_user.id, f'‚ÄºÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Å–∞–π—Ç–æ–º –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏, '
                                               f'–ø—Ä–æ–±—É—é –µ—â—ë —Ä–∞–∑ –ø—Ä–∏–º–µ—Ä–Ω–æ —á–µ—Ä–µ–∑ {LONG_SLEEP} —Å–µ–∫—É–Ω–¥...')
        Sleep(LONG_SLEEP, 0.5)
        api_id, api_hash = GetAppData(message, session)
    else:
        if str(response.status_code)[0] == '2':
            Stamp(f'Got HTML page', 's')
            BOT.send_message(message.from_user.id, f'‚ôªÔ∏è –ü–æ–ª—É—á–∏–ª —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–∞–π—Ç–∞, –∏—â—É –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ')
            api_id, api_hash = ParseReadyHTML(response.text)
        else:
            Stamp('Did not got HTML page', 'e')
            BOT.send_message(message.from_user.id, f'üìõ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–∞–π—Ç–∞ —Å API_ID –∏ API_HASH, '
                             f'–ø—Ä–æ–±—É—é –µ—â—ë —Ä–∞–∑ –ø—Ä–∏–º–µ—Ä–Ω–æ —á–µ—Ä–µ–∑ {LONG_SLEEP} —Å–µ–∫—É–Ω–¥...')
            Sleep(LONG_SLEEP, 0.5)
            api_id, api_hash = GetAppData(message, session)
    return api_id, api_hash


def ParseReadyHTML(page: str) -> (str, str):
    api_id_pattern = r'<label for="app_id" class="col-md-4 text-right control-label">App api_id:</label>\s*<div class="col-md-7">\s*<span class="form-control input-xlarge uneditable-input"[^>]*><strong>(\d+)</strong></span>'
    api_hash_pattern = r'<label for="app_hash" class="col-md-4 text-right control-label">App api_hash:</label>\s*<div class="col-md-7">\s*<span class="form-control input-xlarge uneditable-input"[^>]*>([a-f0-9]{32})</span>'
    api_id_match = search(api_id_pattern, page, IGNORECASE)
    api_hash_match = search(api_hash_pattern, page, IGNORECASE)
    api_id = api_id_match.group(1) if api_id_match else '–ù–µ –Ω–∞—à—ë–ª!'
    api_hash = api_hash_match.group(1) if api_hash_match else '–ù–µ –Ω–∞—à—ë–ª!'
    return api_id, api_hash
